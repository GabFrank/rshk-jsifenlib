package com.roshka.sifen.model.envi;

import com.roshka.sifen.config.SifenConfig;
import com.roshka.sifen.exceptions.SifenException;
import com.roshka.sifen.model.Constants;
import com.roshka.sifen.model.de.TgCamDEAsoc;
import com.roshka.sifen.model.de.TgPagCont;
import com.roshka.sifen.model.de.types.TTiDE;
import com.roshka.sifen.sdk.v150.beans.DocumentoElectronico;
import com.roshka.sifen.ssl.SSLContextHelper;
import com.roshka.sifen.util.HttpUtil;
import com.roshka.sifen.util.SifenExceptionUtil;
import com.roshka.sifen.util.SifenUtil;
import org.w3c.dom.Attr;

import javax.xml.crypto.MarshalException;
import javax.xml.crypto.dsig.*;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.keyinfo.X509Data;
import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;
import javax.xml.crypto.dsig.spec.TransformParameterSpec;
import javax.xml.namespace.QName;
import javax.xml.soap.*;
import java.nio.charset.StandardCharsets;
import java.security.*;
import java.security.cert.X509Certificate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import static com.roshka.sifen.model.Constants.SIFEN_CURRENT_VERSION;

public class REnviDe extends REnviBase {
    public static final String TAG_NAME = "rEnviDe";

    private DocumentoElectronico DE;
    private String Id;
    private String dDVId;

    @Override
    public void setupSOAPBody(SOAPBody soapBody, SifenConfig sifenConfig) throws SifenException {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss");
            this.prepareAutogeneratedFields();

            // Main Element
            SOAPBodyElement rResEnviDe = soapBody.addBodyElement(new QName(Constants.SIFEN_NS_URI, TAG_NAME));
            rResEnviDe.addChildElement("dId").setTextContent(String.valueOf(this.getdId()));

            SOAPElement rDe = rResEnviDe.addChildElement("xDe").addChildElement(new QName(Constants.SIFEN_NS_URI, "rDe"));
            rDe.addNamespaceDeclaration("xsi", "http://www.w3.org/2001/XMLSchema-instance");
            rDe.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "xsi:schemaLocation", Constants.SIFEN_NS_URI_RECEP_DE);

            rDe.addChildElement("dVerFor").setTextContent(SIFEN_CURRENT_VERSION);

            SOAPElement DE = rDe.addChildElement("DE");
            DE.setAttribute("Id", this.Id);
            Attr idAttribute = DE.getAttributeNode("Id");
            DE.setIdAttributeNode(idAttribute, true);

            DE.addChildElement("dDVId").setTextContent(this.dDVId);
            DE.addChildElement("dFecFirma").setTextContent(this.DE.getdFecFirma().format(formatter));
            DE.addChildElement("dSisFact").setTextContent(String.valueOf(this.DE.getdSisFact()));

            TTiDE iTiDE = this.DE.getgTimb().getTiDE();
            this.DE.getgOpeDE().setupSOAPElements(DE, iTiDE);
            this.DE.getgTimb().setupSOAPElements(DE);
            this.DE.getdDatGralOpe().setupSOAPElements(DE, iTiDE);
            this.DE.getgDtipDE().setupSOAPElements(DE, iTiDE, this.DE.getdDatGralOpe());

            if (iTiDE.getVal() != 7)
                this.DE.getgTotSub().setupSOAPElements(DE, iTiDE, this.DE.getdDatGralOpe().getgOpeCom());

            if (this.DE.getgCamGen() != null)
                this.DE.getgCamGen().setupSOAPElements(DE, iTiDE);

            if (iTiDE.getVal() == 4 || iTiDE.getVal() == 5 || iTiDE.getVal() == 6 || ((iTiDE.getVal() == 1 || iTiDE.getVal() == 7) && this.DE.getgCamDEAsocList() != null)) {
                boolean retencionExists = false;
                for (TgPagCont gPaCondEIni : this.DE.getgDtipDE().getgCamCond().getgPaCondEIniList()) {
                    if (gPaCondEIni.getiTiPago().getVal() == 10) {
                        retencionExists = true;
                        break;
                    }
                }

                for (TgCamDEAsoc gCamDEAsoc : this.DE.getgCamDEAsocList()) {
                    gCamDEAsoc.setupSOAPElements(DE, this.DE.getdDatGralOpe().getgOpeCom().getTipTra(), retencionExists);
                }
            }

            // Firma Digital del XML
            SignedInfo signedInfo = this.signFields(rDe, sifenConfig);

            // Preparación de la URL del QR
            HashMap<String, String> queryParams = new HashMap<>();
            queryParams.put("nVersion", SIFEN_CURRENT_VERSION);
            queryParams.put("Id", this.Id);
            queryParams.put("dFeEmiDE", SifenUtil.bytesToHex(this.DE.getdDatGralOpe().getdFeEmiDE().toString().getBytes(StandardCharsets.UTF_8)));

            if (this.DE.getdDatGralOpe().getgDatRec().getiNatRec().getVal() == 1) {
                queryParams.put("dRucRec", this.DE.getdDatGralOpe().getgDatRec().getdRucRec());
            } else if (this.DE.getdDatGralOpe().getgDatRec().getiTiOpe().getVal() != 4 && this.DE.getdDatGralOpe().getgDatRec().getdNumIDRec() != null) {
                queryParams.put("dNumIDRec", this.DE.getdDatGralOpe().getgDatRec().getdNumIDRec());
            } else {
                queryParams.put("dNumIDRec", "0");
            }

            if (iTiDE.getVal() != 7) {
                queryParams.put("dTotGralOpe", String.valueOf(this.DE.getgTotSub().getdTotGralOpe()));
                queryParams.put("dTotIVA",
                        this.DE.getdDatGralOpe().getgOpeCom().getiTImp().getVal() == 1 || this.DE.getdDatGralOpe().getgOpeCom().getiTImp().getVal() == 5
                                ? String.valueOf(this.DE.getgTotSub().getdTotIVA())
                                : "0"
                );
            } else {
                queryParams.put("dTotGralOpe", "0");
                queryParams.put("dTotIVA", "0");
            }

            queryParams.put("cItems", String.valueOf(this.DE.getgDtipDE().getgCamItemList().size()));
            queryParams.put("DigestValue", SifenUtil.bytesToHex(((Reference) signedInfo.getReferences().get(0)).getDigestValue()));
            queryParams.put("IdCSC", sifenConfig.getIdCSC());

            String urlParamsString = HttpUtil.buildUrlParams(queryParams);

            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            String hashedParams = SifenUtil.bytesToHex(digest.digest((urlParamsString + sifenConfig.getCSC()).getBytes(StandardCharsets.UTF_8)));

            String dCarQR = sifenConfig.getUrlConsultaQr() + urlParamsString + "&cHashQR=" + hashedParams;
            //dCarQR = dCarQR.replaceAll("&", "&amp;");

            SOAPElement gCamFuFD = rDe.addChildElement("gCamFuFD");
            gCamFuFD.addChildElement("dCarQR").setTextContent(dCarQR);
        } catch (SOAPException | NoSuchAlgorithmException e) {
            throw SifenExceptionUtil.requestPreparationError("Ocurrió un error al preparar el cuerpo de la petición SOAP", e);
        }
    }

    private void prepareAutogeneratedFields() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd");
        String CDC = String.format("%s%s%s%s%s%s%s%s%s%s",
                SifenUtil.leftPad(String.valueOf(this.DE.getgTimb().getTiDE().getVal()), '0', 2),
                SifenUtil.leftPad(this.DE.getdDatGralOpe().getgEmis().getdRucEmi(), '0', 8),
                this.DE.getdDatGralOpe().getgEmis().getdDVEmi(),
                this.DE.getgTimb().getdEst(),
                this.DE.getgTimb().getdPunExp(),
                SifenUtil.leftPad(String.valueOf(this.DE.getgTimb().getdNumDoc()), '0', 7),
                String.valueOf(this.DE.getdDatGralOpe().getgEmis().getiTipCont().getVal()),
                this.DE.getdDatGralOpe().getdFeEmiDE().format(formatter),
                String.valueOf(this.DE.getgOpeDE().getiTipEmi().getVal()),
                this.DE.getgOpeDE().getdCodSeg()
        );

        this.dDVId = SifenUtil.generateDv(CDC);
        this.Id = CDC + this.dDVId;
    }

    private SignedInfo signFields(Node nodeToSign, SifenConfig sifenConfig) throws SifenException {
        try {
            XMLSignatureFactory sigFactory = XMLSignatureFactory.getInstance();

            List<Transform> transforms = new ArrayList<>();
            transforms.add(sigFactory.newTransform(Transform.ENVELOPED, (TransformParameterSpec) null));
            transforms.add(sigFactory.newTransform(CanonicalizationMethod.EXCLUSIVE, (TransformParameterSpec) null));

            Reference ref = sigFactory.newReference("#" + this.Id, sigFactory.newDigestMethod(DigestMethod.SHA256, null), transforms, null, null);
            SignedInfo signedInfo = sigFactory.newSignedInfo(
                    sigFactory.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE, (C14NMethodParameterSpec) null),
                    sigFactory.newSignatureMethod(Constants.RSA_SHA256, null),
                    Collections.singletonList(ref)
            );

            KeyStore keyStore = SSLContextHelper.getCertificateKeyStore(sifenConfig);
            String alias = keyStore.aliases().nextElement();
            X509Certificate certificate = (X509Certificate) keyStore.getCertificate(alias);

            List<X509Certificate> x509Content = new ArrayList<>();
            x509Content.add(certificate);

            KeyInfoFactory keyInfoFactory = sigFactory.getKeyInfoFactory();
            X509Data x509Data = keyInfoFactory.newX509Data(x509Content);
            KeyInfo keyInfo = keyInfoFactory.newKeyInfo(Collections.singletonList(x509Data));

            XMLSignature signature = sigFactory.newXMLSignature(signedInfo, keyInfo);
            PrivateKey privateKey = (PrivateKey) keyStore.getKey(alias, sifenConfig.getContrasenaCertificadoCliente().toCharArray());

            DOMSignContext signatureContext = new DOMSignContext(privateKey, nodeToSign);
            signature.sign(signatureContext);

            return signedInfo;
        } catch (NoSuchAlgorithmException | InvalidAlgorithmParameterException | XMLSignatureException | MarshalException | KeyStoreException | UnrecoverableKeyException e) {
            throw SifenExceptionUtil.requestSigningError("Ocurrió un error al firmar la petición SOAP utilizando el certificado activo", e);
        }
    }

    public void setDE(DocumentoElectronico DE) {
        this.DE = DE;
    }
}
