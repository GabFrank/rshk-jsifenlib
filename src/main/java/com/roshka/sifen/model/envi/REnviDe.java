package com.roshka.sifen.model.envi;

import com.roshka.sifen.config.SifenConfig;
import com.roshka.sifen.exceptions.SifenException;
import com.roshka.sifen.model.Constants;
import com.roshka.sifen.sdk.v150.beans.DocumentoElectronico;
import com.roshka.sifen.util.HttpUtil;
import com.roshka.sifen.util.SifenExceptionUtil;
import com.roshka.sifen.util.SifenUtil;
import org.w3c.dom.Attr;

import javax.xml.crypto.dsig.Reference;
import javax.xml.crypto.dsig.SignedInfo;
import javax.xml.namespace.QName;
import javax.xml.soap.*;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;

import static com.roshka.sifen.model.Constants.SIFEN_CURRENT_VERSION;

public class REnviDe extends RSignedEnviBase {
    public static final String TAG_NAME = "rEnviDe";

    private DocumentoElectronico DE;
    private String Id;
    private String dDVId;

    @Override
    public String getSignedNodeId() {
        return this.Id;
    }

    private Node signatureParentNode;
    @Override
    public Node getSignatureParentNode() {
        return signatureParentNode;
    }

    private Node signatureNextSiblingNode;
    @Override
    public Node getSignatureNextSiblingNode() {
        return signatureNextSiblingNode;
    }

    @Override
    public void setupSOAPBody(SOAPBody soapBody, SifenConfig sifenConfig) throws SifenException {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss");
            this.prepareAutogeneratedFields();

            // Main Element
            SOAPBodyElement rResEnviDe = soapBody.addBodyElement(new QName(Constants.SIFEN_NS_URI, TAG_NAME));
            rResEnviDe.addChildElement("dId").setTextContent(String.valueOf(this.getdId()));

            SOAPElement rDE = rResEnviDe.addChildElement("xDE").addChildElement(new QName(Constants.SIFEN_NS_URI, "rDE"));
            this.signatureParentNode = rDE;

            rDE.addNamespaceDeclaration("xsi", "http://www.w3.org/2001/XMLSchema-instance");
            rDE.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "xsi:schemaLocation", Constants.SIFEN_NS_URI_RECEP_DE);

            rDE.addChildElement("dVerFor").setTextContent(SIFEN_CURRENT_VERSION);

            SOAPElement DE = rDE.addChildElement("DE");
            DE.setAttribute("Id", this.Id);
            Attr idAttribute = DE.getAttributeNode("Id");
            DE.setIdAttributeNode(idAttribute, true);

            DE.addChildElement("dDVId").setTextContent(this.dDVId);
            DE.addChildElement("dFecFirma").setTextContent(this.DE.getdFecFirma().format(formatter));
            DE.addChildElement("dSisFact").setTextContent(String.valueOf(this.DE.getdSisFact()));

            // Se completa con los dem치s elementos del XML
            this.DE.setupSOAPElements(DE);

            // Firma Digital del XML
//            SignedInfo signedInfo = this.signDocument(rDE, sifenConfig);

            // Preparaci칩n de la URL del QR
            SOAPElement gCamFuFD = rDE.addChildElement("gCamFuFD");
            this.signatureNextSiblingNode = gCamFuFD;
//            gCamFuFD.addChildElement("dCarQR").setTextContent(this.generateQRLink(signedInfo, sifenConfig));
            gCamFuFD.addChildElement("dCarQR").setTextContent("https://ekuatia.set.gov.py/consultas-test/qr?nVersion=150&amp;dNumIDRec=4579993&amp;dTotGralOpe=240000&amp;dTotIVA=21818&amp;cItems=2&amp;Id=01800805534001002000000322020120514391019776&amp;DigestValue=C2E5D637A6CCEFEAE6EE9535F4276C5444578EFE0A231B22FA4130556B6C270A&amp;IdCSC=0001&amp;dFeEmiDE=323032302D31322D30355431313A31313A32372E313430&amp;cHashQR=15F4D41C0164AE4C31F6F2F71E440B21BD3D5897F0D8C2F6B6357CA6D1ED73F6");

            setReadyToSign(true);

        } catch (SOAPException e) {
            throw SifenExceptionUtil.requestPreparationError("Ocurri칩 un error al preparar el cuerpo de la petici칩n SOAP", e);
        }
    }

    private void prepareAutogeneratedFields() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd");
        String CDC = String.format("%s%s%s%s%s%s%s%s%s%s",
                SifenUtil.leftPad(String.valueOf(this.DE.getgTimb().getTiDE().getVal()), '0', 2),
                SifenUtil.leftPad(this.DE.getdDatGralOpe().getgEmis().getdRucEmi(), '0', 8),
                this.DE.getdDatGralOpe().getgEmis().getdDVEmi(),
                this.DE.getgTimb().getdEst(),
                this.DE.getgTimb().getdPunExp(),
                SifenUtil.leftPad(String.valueOf(this.DE.getgTimb().getdNumDoc()), '0', 7),
                String.valueOf(this.DE.getdDatGralOpe().getgEmis().getiTipCont().getVal()),
                this.DE.getdDatGralOpe().getdFeEmiDE().format(formatter),
                String.valueOf(this.DE.getgOpeDE().getiTipEmi().getVal()),
                this.DE.getgOpeDE().getdCodSeg()
        );

        this.dDVId = SifenUtil.generateDv(CDC);
        this.Id = CDC + this.dDVId;
    }

    private String generateQRLink(SignedInfo signedInfo, SifenConfig sifenConfig) throws NoSuchAlgorithmException {
        HashMap<String, String> queryParams = new HashMap<>();
        queryParams.put("nVersion", SIFEN_CURRENT_VERSION);
        queryParams.put("Id", this.Id);
        queryParams.put("dFeEmiDE", SifenUtil.bytesToHex(this.DE.getdDatGralOpe().getdFeEmiDE().toString().getBytes(StandardCharsets.UTF_8)));

        if (this.DE.getdDatGralOpe().getgDatRec().getiNatRec().getVal() == 1) {
            queryParams.put("dRucRec", this.DE.getdDatGralOpe().getgDatRec().getdRucRec());
        } else if (this.DE.getdDatGralOpe().getgDatRec().getiTiOpe().getVal() != 4 && this.DE.getdDatGralOpe().getgDatRec().getdNumIDRec() != null) {
            queryParams.put("dNumIDRec", this.DE.getdDatGralOpe().getgDatRec().getdNumIDRec());
        } else {
            queryParams.put("dNumIDRec", "0");
        }

        if (this.DE.getgTimb().getTiDE().getVal() != 7) {
            queryParams.put("dTotGralOpe", String.valueOf(this.DE.getgTotSub().getdTotGralOpe()));
            queryParams.put("dTotIVA",
                    this.DE.getdDatGralOpe().getgOpeCom().getiTImp().getVal() == 1 || this.DE.getdDatGralOpe().getgOpeCom().getiTImp().getVal() == 5
                            ? String.valueOf(this.DE.getgTotSub().getdTotIVA())
                            : "0"
            );
        } else {
            queryParams.put("dTotGralOpe", "0");
            queryParams.put("dTotIVA", "0");
        }

        queryParams.put("cItems", String.valueOf(this.DE.getgDtipDE().getgCamItemList().size()));
        queryParams.put("DigestValue", SifenUtil.bytesToHex(((Reference) signedInfo.getReferences().get(0)).getDigestValue()));
        queryParams.put("IdCSC", sifenConfig.getIdCSC());

        String urlParamsString = HttpUtil.buildUrlParams(queryParams);

        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        String hashedParams = SifenUtil.bytesToHex(digest.digest((urlParamsString + sifenConfig.getCSC()).getBytes(StandardCharsets.UTF_8)));

        return sifenConfig.getUrlConsultaQr() + urlParamsString + "&cHashQR=" + hashedParams;
    }

    public void setDE(DocumentoElectronico DE) {
        this.DE = DE;
    }
}
